import { CommonModule, DatePipe } from '@angular/common';
import { Component, CUSTOM_ELEMENTS_SCHEMA, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ChangeDetectorRef } from '@angular/core'; // Import ChangeDetectorRef
import { MenuService } from '../service/menu.service'; // Import MenuService
import { RestaurantService } from '../service/restaurant.service'; // Import RestaurantService
import { Menu } from '../service/menu.service'; // Assuming Menu is already defined in MenuService

@Component({
  selector: 'app-menu',
  standalone: true,
  imports: [DatePipe, CommonModule, ReactiveFormsModule],
  templateUrl: './menu.component.html',
  styleUrls: ['./menu.component.css'],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class MenuComponent implements OnInit {
  menus: Menu[] = [];
  menuForm: FormGroup;
  editingMenuId: number | null = null;
  showForm: boolean = false; // To toggle form visibility
  restaurantID: number = 0; // Initialize restaurantID

  constructor(
    private fb: FormBuilder, 
    private menuService: MenuService,
    private restaurantService: RestaurantService, // Inject RestaurantService
    private cdr: ChangeDetectorRef // Inject ChangeDetectorRef
  ) { 
    this.menuForm = this.fb.group({
      menuID: [0], // `menuID` will be auto-generated by the server for new entries
      restaurantID: [0],
      menuName: [''],
      description: [''],
      createdDate: [new Date()],
      isActive: [true]
    });
  }

  ngOnInit(): void {
    this.fetchRestaurantId(); // Fetch restaurant ID when component initializes
  }

  // Fetch the restaurant ID dynamically
  fetchRestaurantId() {
    this.restaurantService.getRestaurantByName().subscribe({
      next: (restaurantId) => {
        this.restaurantID = Number(restaurantId); // Store the restaurant ID
        console.log(`Restaurant ID: ${this.restaurantID}`);

        // Once restaurant ID is retrieved, load the menus
        this.loadMenus(this.restaurantID);
      },
      error: (err) => {
        console.error('Error fetching restaurant ID:', err);
      }
    });
  }

  // Load menus by restaurantID from API
  loadMenus(restaurantID: number) {
    this.menuService.getMenusByRestaurantId(restaurantID).subscribe({
      next: (menus: Menu[]) => {
        this.menus = menus;
        this.cdr.detectChanges(); // Trigger change detection manually
      },
      error: (error) => {
        console.error('Error loading menus for restaurant:', error);
      }
    });
  }

  // Submit the form for creating/updating a menu
  onSubmit() {
    const menuData = this.menuForm.value;
    menuData.restaurantID = this.restaurantID; // Set the restaurantID in the form data

    if (this.editingMenuId !== null) {
      // If editing, update the menu
      menuData.menuID = this.editingMenuId; // Ensure the correct menuID is used for updates

      this.menuService.updateMenu(menuData).subscribe({
        next: () => {
          this.loadMenus(this.restaurantID); // Reload the menus after update
          this.resetForm(); // Reset form after update
        },
        error: (error) => {
          console.error('Error updating menu:', error);
        }
      });
    } else {
      // If adding a new menu, remove `menuID` to let the server auto-generate it
      delete menuData.menuID; // Remove `menuID` for new entries

      this.menuService.createMenu(menuData).subscribe({
        next: () => {
          this.loadMenus(this.restaurantID); // Reload the menus after creating a new one
          this.resetForm(); // Reset form after creation
        },
        error: (error) => {
          console.error('Error creating menu:', error);
        }
      });
    }
  }

  // Edit a menu by populating the form with existing menu data
  editMenu(menu: Menu) {
    this.menuForm.setValue({
      menuID: menu.menuID,
      restaurantID: menu.restaurantID,
      menuName: menu.menuName,
      description: menu.description,
      createdDate: menu.createdDate,
      isActive: menu.isActive
    });
    this.editingMenuId = menu.menuID;
    this.showForm = true; // Show the form when editing
  }

  // Delete a menu using the API
  deleteMenu(menuID: number) {
    this.menuService.deleteMenu(menuID).subscribe({
      next: () => {
        this.loadMenus(this.restaurantID); // Reload the menus after deleting
      },
      error: (error) => {
        console.error('Error deleting menu:', error);
      }
    });
  }

  // Toggle the form visibility for adding a new menu
  toggleAddMenu() {
    this.resetForm(); // Reset the form for adding a new menu
    this.showForm = !this.showForm;
  }

  // Reset the form and clear editing state
  private resetForm() {
    this.menuForm.reset({ createdDate: new Date(), isActive: true });
    this.editingMenuId = null;
    this.showForm = false; // Hide the form after submission
  }
}
